---
title: "Validación del Archivo String - Concurso de Méritos"
author: |
  <div>
    <p><strong>Elaborado por:</strong></p>
    <ul>
      <li>Andrea Caterine Diaz Montealegre</li>
      <li>Juan Sebastian Castro Salamanca</li>
    </ul>
    <p><strong>Revisado y Aprobado por:</strong></p>
    <ul>
      <li>Ricardo Macias Bohorquez</li>
      <li>Sergio Enrique Mora Mojica</li>
    </ul>
  </div>
date: "`r format(Sys.Date(), '%d de %B de %Y')`"
output: 
  html_document:
    toc: true
    toc_float:
      collapsed: true
      smooth_scroll: true
    theme: journal
    highlight: kate
    df_print: paged
    code_folding: show
header-includes:
  - |
    <style>
      body {
        text-align: justify;
      }
    </style>
editor_options: 
  markdown: 
    wrap: 90
---

------------------------------------------------------------------------------------------

![](images/clipboard-528376398.png)

*El presente documento ofrece un resumen de la información recibida en la aplicación de la
prueba escrita. A continuación, se detalla la estructura del archivo en cuanto al número
de columnas y filas. También se presentan la la cantidad de omisiones, multimarcas,
pruebas aplicadas y evaluados por formas de prueba.*

***El objetivo de este informe ejecutivo es brindar un resumen de los datos recibidos por
el equipo de medición y evaluación (Calificación y Análisis) y obtener la confirmación del
gerente del concurso.***

------------------------------------------------------------------------------------------

```{r setup,message = FALSE, include=FALSE,echo = FALSE}
knitr::opts_chunk$set(echo = FALSE) 

# install.packages("tidyverse")
# install.packages("flextable")
# install.packages("dplyr")
# install.packages("readxl")
# install.packages("janitor")
# install.packages("purrr")
# install.packages("data.table")
# install.packages("DT")
# install.packages("kableExtra")
# install.packages("datasauRus")
# install.packages("tidyr")
# install.packages("ggplot2")
# install.packages("knitr")
# install.packages("htmltools")

library(tidyverse)
library(flextable)
library(dplyr)
library(readxl)
library(janitor)
library(purrr)
library(data.table)
library(DT)
library(kableExtra)
library(datasauRus)
library(tidyr)
library(ggplot2)
library(knitr)
library(htmltools)


String <- read_excel("C:/Users/juans.castros/Downloads/Matriz ejemplo entrega resultados DT 2024.xlsx")


# muestrastring <- String %>% sample_n(15, replace = FALSE)

#String[String == "NA"] <- NA 
#string_NA <- is.na(muestrastring)

name_conc <- "**Directores Territoriales - 2024**"
cat("\033[1;30m", name_conc, "\033[0m\n")

```

# Información General

::: {style="font-size: 1em; text-align: justify;"}
`r paste( "Este informe se centra en los strings de respuesta del concurso", name_conc, ", que incluyen un total de", dim(String)[1], "concursantes y", dim(String)[2] - 9, "ítems (", sum(grepl("^CF-", colnames(String))), "funcionales y", sum(grepl("^CC-", colnames(String))), "comportamentales).", "Hay", length(setdiff(colnames(String), grep("^CC-|^CF", colnames(String), value = TRUE))), "columnas que no corresponden a ítems. Los nombres de estas columnas son:", paste(paste0("**", setdiff(colnames(String), grep("^CC-|^CF", colnames(String), value = TRUE)), "**"), collapse = ", "), "." )`

`r paste ("Se encuentran", length(unique(String$CC)), "casos únicos y", dim(String)[1] - length(unique(String$CC)), "caso/s repetido/s")`

A continuación, se presenta la información en una tabla de la cantidad total de columnas y
filas que tiene el archivo "String de respuestas" el cual fue entregado al equipo de
Medición y Evaluación - Análisis y Calificación-.

El archivo de strings contiene:
:::

```{r, echo=FALSE}

numfilas <- nrow(String)
numcol <- ncol(String)

# Crear el dataframe conteo_tabla
conteo_tabla <- data.frame(
  "Total de Filas" = numfilas,
  "Total de Columnas" = numcol
)

# Mejorar el estilo de la tabla
conteo_tabla %>%
  kable(col.names = c("Cantidad de Filas", "Cantidad de Columnas")) %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), 
                full_width = TRUE) %>%
  add_header_above(c("Resumen del Dataframe" = 2)) %>%
  column_spec(1, bold = TRUE, border_right = TRUE) %>%
  column_spec(2, border_left = TRUE) %>%
  row_spec(0, bold = TRUE, color = "black")

```

## Verificación del documento del concursante

::: {style="font-size: 1em; text-align: justify;"}
Se realiza la verificación del documento del concursante con el objetivo de identificar
posibles duplicados en el archivo. En caso de que existan, se podrán identificar dentro de
la base de datos.
:::

```{r, echo=FALSE}

duplicados <- duplicated(String$CC) | duplicated(String$CC, fromLast = TRUE)

if (any(duplicados)) {
  cat("Se encontraron duplicados en las siguientes filas:\n")
  # Crear un dataframe con una columna adicional para los números de fila
  String_con_filas <- cbind(Fila = 1:nrow(String), String)
  # Filtrar las filas duplicadas
  filas_duplicadas <- String_con_filas[duplicados, ]
  print(filas_duplicadas, row.names = FALSE)
} else {
  cat('No se encontraron registros duplicados\n')
}

```

::: {style="font-size: 1em; text-align: justify;"}
En caso de encontrar duplicados se realizará la validación de cuál cédula es y a cuál
municipio corresponde, dado que si el municipio cambia o es diferente en cada uno de los
casos puede corresponder a una multi-inscripción.
:::

### Concursantes por Territorial

```{r, echo=FALSE,include=FALSE}
Con_Terr<- String %>%
  count(Territorial) %>%
  bind_rows(summarise(., Territorial = "Total", n = sum(n))) %>%
  rename(`# de Concursantes` = n) %>%
  flextable() %>%
  set_caption("Total de Evaluados por Territorial") %>%
  width(j = c("Territorial", "# de Concursantes"), width = 4)

Total_CC<-length(String$CC)
```

::: {style="font-size: 1em; text-align: justify;"}
A continuación, se presenta la cantidad de concursantes por territorial en la siguiente
tabla.
:::

```{r, echo=FALSE}
Con_Terr
```

## Flujos de Respuesta

### Flujo Funcionales (C. Común)

::: {style="font-size: 1em; text-align: justify;"}
Este componente incluye los ítems desde CF-01 hasta CF-72. En la siguiente tabla se
muestra el flujo de respuestas. Si se detectan MULTICLAVES u OMISIONES, se reportarán en
la tabla.
:::

```{r, echo=FALSE, pages.print=10, rownames.print=FALSE}
datatable(as.data.frame(String %>%
  pivot_longer(cols = matches("^CF-0?[1-9]$|^CF-[1-6][0-9]$|^CF-7[0-2]$"), names_to = "Item", values_to = "String") %>%
  group_by(Item, String) %>%
  summarise(Cantidad = n(), .groups = 'drop') %>%
  pivot_wider(names_from = String, values_from = Cantidad, values_fill = list(Cantidad = 0)) %>%
  arrange(Item)),
  filter = 'top',
  rownames = FALSE,
  options = list(pageLength = 8)
)

```

### Flujo Funcionales (C. Específico)

::: {style="font-size: 1em; text-align: justify;"}
Este componente es específico por territorial y comprende los ítems desde CF-73 hasta
CF-80. Si se detectan MULTICLAVES u OMISIONES, se reportarán en la tabla.
:::

```{r, echo=FALSE, rownames.print=FALSE}

datatable(as.data.frame(String %>%
  pivot_longer(cols = matches("^CF-7[3-9]$|^CF-80$"), names_to = "Item", values_to = "String") %>% 
    group_by(Territorial, Item, String) %>%
    summarise(Cantidad = n(), .groups = 'drop') %>%
    pivot_wider(names_from = String, values_from = Cantidad, values_fill = list(Cantidad = 0)) %>%
    arrange(Territorial, Item)),
  filter = 'top',
  rownames = FALSE,
  options = list(pageLength = 8)
)
```

### Flujo Comportamentales

::: {style="font-size: 1em; text-align: justify;"}
`r paste("Este componente comprende los ítems CC-",           sprintf("%02d", min(as.numeric(sub("CC-", "", grep("^CC-[0-9]+$", colnames(String), value = TRUE))))),           " hasta CC-",           sprintf("%02d", max(as.numeric(sub("CC-", "", grep("^CC-[0-9]+$", colnames(String), value = TRUE))))),           ". En la siguiente tabla encontrará el flujo de respuestas. Si se detectan MULTICLAVES u OMISIONES, se reportarán en la tabla.",           sep = "")`
:::

```{r, echo=FALSE, pages.print=10, rownames.print=FALSE}
datatable(as.data.frame(String %>%
  pivot_longer(cols = matches("^CC-"), names_to = "Item", values_to = "String") %>%
  group_by(Item, String) %>%
  summarise(Cantidad = n(), .groups = 'drop') %>%
  pivot_wider(names_from = String, values_from = Cantidad, values_fill = list(Cantidad = 0)) %>%
  arrange(Item)),
  filter = 'top',
  rownames = FALSE,
  options = list(pageLength = 8)
)

```

::: {style="font-size: 1.1em; text-align: justify; color:black"}
Agradecemos su atención a este informe.

El equipo de medición y evaluación (**Calificación y Análisis**) queda atento a cualquier
comentario o sugerencia que puedan tener. No duden en contactarnos para cualquier
aclaración adicional. Asimismo, solicitamos la **confirmación** del gerente del concurso
para proceder con el inicio de la calificación.
:::
